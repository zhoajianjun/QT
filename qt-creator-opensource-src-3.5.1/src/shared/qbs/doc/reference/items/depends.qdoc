/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing
**
** This file is part of the Qt Build Suite.
**
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms and
** conditions see http://www.qt.io/terms-conditions. For further information
** use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file.  Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, The Qt Company gives you certain additional
** rights.  These rights are described in The Qt Company LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
****************************************************************************/
/*!
    \contentspage list-of-items.html
    \previouspage cppapplication-item.html
    \page depends-item.html
    \nextpage dynamiclibrary-item.html
    \ingroup list-of-items

    \title Depends Item
    \brief Represents dependencies between products and modules.

    A \c Depends item can appear inside a \l{Product Item} or \l{Module Item}.

    For example, the following product will load the \c cpp module. In addition, it will try
    to load modules that may or may not exist, and in the latter case use a fallback.
    \code
    Product {
        Depends { name: "cpp" }
        Depends {
            name: "awesome_module"
            required: false
        }
        Depends {
            name: "adequate_module"
            condition: !awesome_module.present
            required: false
        }
        Depends {
            name: "crappy_module"
            condition: !awesome_module.present && !adequate_module.present
        }

        // ...
    }
    \endcode


    \section1 Depends Properties

    \table
    \header
        \li Property
        \li Type
        \li Default
        \li Description
    \row
        \li condition
        \li bool
        \li true
        \li Determines whether the dependency will actually be applied.
    \row
        \li productTypes
        \li stringList
        \li undefined
        \li A list of product types. Any enabled product in the project that has a matching type
            will become a dependency of the product containing the \c Depends item.
            This property is mutually exclusive with the \c name and \c submodules properties.
            The \c required and \c profiles properties are ignored if \c productTypes is set.
    \row
        \li required
        \li bool
        \li \c true
        \li Setting this property to \c false creates a \e{soft dependency}, meaning that it is not
            considered an error if the given module cannot be found. In such a case, an instance of
            the respective module will be created, but only the \c present property will be
            available for querying, and it will be set to \c false.
    \row
        \li name
        \li string
        \li undefined
        \li The name of the dependent product or module.
    \row
        \li profiles
        \li stringList
        \li \c{[product.profile]}
        \li If the dependency is on a product and that product is going to be built for more than
            one profile, then you can specify here which instance of the product the dependency is on.
            See the \c profiles property of the \c Product item for more information.
            An empty list means a dependency on all instances of the product with the given name,
            regardless of their profile.
    \row
        \li limitToSubProject
        \li bool
        \li \c false
        \li If \c productTypes is set and this property is \c true, then only products that
            are in the same sub-project as the product containing the \c Depends item are
            considered.
    \row
        \li submodules
        \li stringList
        \li undefined
        \li The submodules of \c module to depend on, if applicable.
    \endtable

*/
