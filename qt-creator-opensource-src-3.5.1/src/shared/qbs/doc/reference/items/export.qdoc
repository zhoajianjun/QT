/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing
**
** This file is part of the Qt Build Suite.
**
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms and
** conditions see http://www.qt.io/terms-conditions. For further information
** use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file.  Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, The Qt Company gives you certain additional
** rights.  These rights are described in The Qt Company LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
****************************************************************************/
/*!
    \contentspage list-of-items.html
    \previouspage dynamiclibrary-item.html
    \page export-item.html
    \nextpage filetagger-item.html
    \ingroup list-of-items

    \title Export Item
    \brief Exports dependencies and properties to other products.

    An \c Export item can appear inside a \l{Product Item}. It defines a Module with the product's
    name that can be depended on by other products.
    The properties attached to the Export item will take effect in all products that depend on the
    product inside which the Export item is defined.
    As an example, consider these two products:
    \code
    Product {
        name: "A"
        Export {
            Depends { name: "cpp" }
            cpp.includePaths: product.sourceDirectory
            cpp.defines: ["USING_" + product.name.toUpperCase()]
        }
    }

    Product {
        name: "B"
        Depends { name: "A" }
    }
    \endcode

    The sources in product B will be able to use headers from product A without specifiying
    the full path to them, because the include path has been made known to the compiler via
    A's Export item. Additionally, product B will be compiled with the define \c{USING_A}.

    \note This relationship is transitive, so a product C depending on product B will also
    get the include paths and preprocessor macros via A's Export item.

    In contrast to Module items, \c{product} within Export items refers to the product which defines
    the Export item.
*/
